name: Atualizar dados ArcosLand (Pages)

on:
  workflow_dispatch:
  schedule:
    - cron: '*/5 * * * *'   # a cada 5 min
  push:
    branches: [ main, master ]

concurrency:
  group: arcosland-pages
  cancel-in-progress: false

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      RTDB_URL: "https://arcosland-90ad2-default-rtdb.firebaseio.com/aquario.json"
      OUT_DIR: "public"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Gerar arquivos (current.txt, txt, data.json, index.html)
        shell: bash
        run: |
          set -euo pipefail
          node <<'NODE'
          const https = require('https');
          const fs = require('fs');
          const path = require('path');

          const RTDB_URL = process.env.RTDB_URL;
          const OUT_DIR = process.env.OUT_DIR || 'public';

          function fetchJSONWithRetry(url, retries = 3, baseDelay = 700, timeoutMs = 8000) {
            return new Promise((resolve, reject) => {
              let attempt = 0;
              const tryOnce = () => {
                attempt++;
                const req = https.get(url, { headers: { Accept: 'application/json', 'Cache-Control': 'no-store' } }, (res) => {
                  if (res.statusCode && res.statusCode >= 400) { res.resume(); return fail(new Error(`HTTP ${res.statusCode}`)); }
                  let data = '';
                  res.on('data', d => data += d);
                  res.on('end', () => { try { resolve(JSON.parse(data)); } catch (e) { fail(new Error(`Parse JSON: ${e.message}`)); } });
                });
                req.setTimeout(timeoutMs, () => req.destroy(new Error('Timeout')));
                req.on('error', fail);
                function fail(err){ if (attempt >= retries) return reject(err); setTimeout(tryOnce, baseDelay * Math.pow(2, attempt-1)); }
              };
              tryOnce();
            });
          }

          function minusOneDeg(obj) {
            if (obj === null || typeof obj !== 'object') return obj;
            if (Array.isArray(obj)) return obj.map(minusOneDeg);
            const out = {};
            for (const k of Object.keys(obj)) {
              const v = obj[k];
              if (k === 'value' && typeof v === 'number' && Number.isFinite(v)) out[k] = Number((v - 1).toFixed(2));
              else if (v && typeof v === 'object') out[k] = minusOneDeg(v);
              else out[k] = v;
            }
            return out;
          }

          function flattenKV(obj, prefix = '', lines = []) {
            if (obj === null || typeof obj !== 'object') {
              lines.push(`${prefix.replace(/\.$/,'')}=${String(obj)}`);
              return lines;
            }
            for (const k of Object.keys(obj).sort()) {
              const v = obj[k], p = prefix ? `${prefix}.${k}` : k;
              if (v !== null && typeof v === 'object') flattenKV(v, p, lines);
              else lines.push(`${p}=${String(v)}`);
            }
            return lines;
          }

          (async () => {
            // 1) Busca JSON bruto do Firebase
            const raw = await fetchJSONWithRetry(RTDB_URL, 3, 700, 8000);
            if (!raw || !raw.current || typeof raw.current.value !== 'number' || !raw.current.ts) {
              throw new Error('JSON inesperado: faltando current.ts/value');
            }

            // 2) Aplica -1¬∞C
            const adj = minusOneDeg(raw);

            // 3) Garante pasta de sa√≠da
            if (!fs.existsSync(OUT_DIR)) fs.mkdirSync(OUT_DIR, { recursive: true });

            // 4) current.txt
            const currentStr = Number.isFinite(adj.current.value) ? adj.current.value.toFixed(2) : 'N/A';
            fs.writeFileSync(path.join(OUT_DIR, 'current.txt'), currentStr, 'utf-8');

            // 5) txt (chave=valor)
            fs.writeFileSync(path.join(OUT_DIR, 'txt'), flattenKV(adj).join('\n') + '\n', 'utf-8');

            // 6) data.json (completo)
            fs.writeFileSync(path.join(OUT_DIR, 'data.json'), JSON.stringify(adj, null, 2) + '\n', 'utf-8');

            // 7) index.html (est√°tico, sem fetch, com JSON-LD)
            const tsBr = new Date(adj.current.ts).toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' });
            const jsonLd = {
              "@context": "https://schema.org",
              "@type": "Dataset",
              "name": "ArcosLand Temperatura",
              "description": "Dados p√∫blicos de temperatura do aqu√°rio ArcosLand (NodeMCU + Firebase).",
              "creator": { "@type": "Person", "name": "Rodrigo Soares" },
              "variableMeasured": {
                "@type": "PropertyValue",
                "name": "Temperatura da √°gua",
                "value": Number(currentStr),
                "unitCode": "CEL",
                "dateObserved": adj.current.ts,
                "measurementTechnique": "DS18B20 via NodeMCU ESP8266"
              },
              "distribution": [
                { "@type": "DataDownload", "encodingFormat": "application/json", "contentUrl": "./data.json" },
                { "@type": "DataDownload", "encodingFormat": "text/plain",  "contentUrl": "./current.txt" },
                { "@type": "DataDownload", "encodingFormat": "text/plain",  "contentUrl": "./txt" }
              ]
            };

            const html = `<!DOCTYPE html>
          <html lang="pt-BR">
          <head>
            <meta charset="utf-8">
            <meta name="description" content="Temperatura atual do aqu√°rio ArcosLand, extra√≠da do Firebase e publicada a cada 5 minutos.">
            <meta name="robots" content="index,follow">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>ArcosLand ‚Äî Temperatura Atual</title>
            <style>
              :root { color-scheme: light dark; }
              body { font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, monospace; background:#f8f9fa; color:#222; margin:0; padding:24px; }
              h1 { font-family: system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Cantarell, Noto Sans; font-weight:600; text-align:center; margin: 0 0 12px; }
              p.lead { text-align:center; margin: 0 0 24px; }
              .grid { display:grid; gap:16px; max-width: 980px; margin: 0 auto; }
              .card { background:#fff; border:1px solid #ddd; border-radius:12px; padding:16px; box-shadow: 0 2px 8px rgba(0,0,0,.05); }
              pre { margin:0; overflow:auto; }
              .muted { color:#666; font-size:.9em; text-align:center; margin-top:12px; }
              a { color: inherit; }
            </style>
          </head>
          <body>
            <h1>üå°Ô∏è Temperatura do aqu√°rio ArcosLand</h1>
            <p class="lead">No dia <strong>${tsBr}</strong>, a temperatura do aqu√°rio √© <strong>${currentStr} ¬∞C</strong>.</p>

            <div class="grid">
              <div class="card">
                <h2 style="margin-top:0">JSON completo (ajustado ‚àí1&nbsp;¬∞C)</h2>
                <pre>${JSON.stringify(adj, null, 2)}</pre>
              </div>
              <div class="card">
                <h2 style="margin-top:0">Downloads</h2>
                <ul>
                  <li><a href="./current.txt">current.txt</a> ‚Äî valor atual (${currentStr} ¬∞C)</li>
                  <li><a href="./data.json">data.json</a> ‚Äî JSON completo</li>
                  <li><a href="./txt">txt</a> ‚Äî chave=valor</li>
                </ul>
              </div>
            </div>

            <p class="muted">Atualizado automaticamente via GitHub Actions (a cada 5 minutos).</p>

            <script type="application/ld+json">
          ${JSON.stringify(jsonLd)}
            </script>
          </body>
          </html>`;

            fs.writeFileSync(path.join(OUT_DIR, 'index.html'), html, 'utf-8');

            console.log('Arquivos atualizados:');
            console.log(`- ${OUT_DIR}/current.txt`);
            console.log(`- ${OUT_DIR}/txt`);
            console.log(`- ${OUT_DIR}/data.json`);
            console.log(`- ${OUT_DIR}/index.html`);
          })().catch((err) => {
            console.error(err);
            process.exit(1);
          });
          NODE

      - name: Commit & Push (se mudou)
        shell: bash
        run: |
          set -euo pipefail
          if git status --porcelain | grep -qE "${OUT_DIR}/(current\.txt|txt|data\.json|index\.html)"; then
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add ${OUT_DIR}/current.txt ${OUT_DIR}/txt ${OUT_DIR}/data.json ${OUT_DIR}/index.html
            git commit -m "chore: atualizar dados (CI)"
            git push
          else
            echo "Sem mudan√ßas para publicar."
          fi
