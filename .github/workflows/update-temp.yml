name: Atualizar dados ArcosLand (Pages)

on:
  workflow_dispatch:
  schedule:
    - cron: '*/5 * * * *'
  push:
    branches:
      - main
      - master

concurrency:
  group: arcosland-pages
  cancel-in-progress: false

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Gerar arquivos (current.txt, txt, data.json, index.html)
        shell: bash
        run: |
          set -euo pipefail
          node <<'NODE'
          const https = require('https');
          const fs = require('fs');
          const path = require('path');

          const RTDB_URL = 'https://arcosland-90ad2-default-rtdb.firebaseio.com/aquario.json';

          function fetchJSONWithRetry(url, retries = 3, baseDelay = 500, timeoutMs = 8000) {
            return new Promise((resolve, reject) => {
              let attempt = 0;

              const tryOnce = () => {
                attempt++;
                const req = https.get(url, {
                  headers: { Accept: 'application/json', 'Cache-Control': 'no-store' },
                }, (res) => {
                  if (res.statusCode && res.statusCode >= 400) {
                    res.resume(); // descarta
                    return fail(new Error(`HTTP ${res.statusCode}`));
                  }
                  let data = '';
                  res.on('data', d => data += d);
                  res.on('end', () => {
                    try {
                      const json = JSON.parse(data);
                      resolve(json);
                    } catch (e) {
                      fail(new Error(`Falha ao parsear JSON: ${e.message}`));
                    }
                  });
                });

                req.setTimeout(timeoutMs, () => {
                  req.destroy(new Error('Timeout'));
                });

                req.on('error', fail);

                function fail(err) {
                  if (attempt >= retries) return reject(err);
                  const wait = baseDelay * Math.pow(2, attempt - 1);
                  setTimeout(tryOnce, wait);
                }
              };

              tryOnce();
            });
          }

          function minusOneDeg(obj) {
            if (obj === null || typeof obj !== 'object') return obj;
            if (Array.isArray(obj)) return obj.map(minusOneDeg);
            const out = {};
            for (const k of Object.keys(obj)) {
              const v = obj[k];
              if (k === 'value' && typeof v === 'number' && Number.isFinite(v)) {
                out[k] = Number((v - 1).toFixed(2));
              } else if (v && typeof v === 'object') {
                out[k] = minusOneDeg(v);
              } else {
                out[k] = v;
              }
            }
            return out;
          }

          function flattenKV(obj, prefix = '', lines = []) {
            if (obj === null || typeof obj !== 'object') {
              const key = prefix.replace(/\.$/, '');
              lines.push(`${key}=${String(obj)}`);
              return lines;
            }
            const keys = Object.keys(obj).sort();
            for (const k of keys) {
              const v = obj[k];
              const p = prefix ? `${prefix}.${k}` : k;
              if (v !== null && typeof v === 'object') {
                flattenKV(v, p, lines);
              } else {
                lines.push(`${p}=${String(v)}`);
              }
            }
            return lines;
          }

          (async () => {
            const raw = await fetchJSONWithRetry(RTDB_URL, 3, 700, 8000);
            if (!raw || typeof raw !== 'object' || !raw.current || typeof raw.current.value !== 'number' || !raw.current.ts) {
              throw new Error('JSON inesperado: faltando current.ts/value');
            }
            const adj = minusOneDeg(raw);

            const pub = path.join(process.cwd(), 'public');
            if (!fs.existsSync(pub)) fs.mkdirSync(pub, { recursive: true });

            // current.txt
            const current = adj.current.value;
            const currentStr = Number.isFinite(current) ? current.toFixed(2) : 'N/A';
            fs.writeFileSync(path.join(pub, 'current.txt'), currentStr, 'utf-8');

            // txt (chave=valor)
            const lines = flattenKV(adj);
            fs.writeFileSync(path.join(pub, 'txt'), lines.join('\n') + '\n', 'utf-8');

            // data.json (JSON completo)
            fs.writeFileSync(path.join(pub, 'data.json'), JSON.stringify(adj, null, 2) + '\n', 'utf-8');

            // index.html (HTML simples com JSON)
            const html = `<!DOCTYPE html>
          <html lang="pt-BR">
          <head>
            <meta charset="utf-8">
            <title>ArcosLand â€“ Dados do AquÃ¡rio</title>
            <meta name="viewport" content="width=device-width, initial-scale=1" />
            <style>
              body { font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, monospace; background:#f8f9fa; margin:0; padding:20px; }
              h1 { font-family: system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Cantarell, Noto Sans; text-align:center; }
              pre { background:#fff; padding:16px; border-radius:8px; overflow:auto; box-shadow:0 0 6px #ccc; }
              small { display:block; text-align:center; color:#555; margin-top:1em; }
            </style>
          </head>
          <body>
            <h1>ðŸŒ¿ ArcosLand â€“ Dados Atuais do AquÃ¡rio</h1>
            <pre>${JSON.stringify(adj, null, 2)}</pre>
            <small>Atualizado automaticamente via GitHub Actions</small>
          </body>
          </html>`;
            fs.writeFileSync(path.join(pub, 'index.html'), html, 'utf-8');

            console.log('Arquivos atualizados:');
            console.log('- public/current.txt');
            console.log('- public/txt');
            console.log('- public/data.json');
            console.log('- public/index.html');
          })().catch((err) => {
            console.error(err);
            process.exit(1);
          });
          NODE

      - name: Detectar alteraÃ§Ãµes
        id: changes
        shell: bash
        run: |
          if git status --porcelain | grep -qE "public/(current\.txt|txt|data\.json|index\.html)"; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
          else
            echo "changed=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Commit & Push (se mudou)
        if: steps.changes.outputs.changed == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add public/current.txt public/txt public/data.json public/index.html
          git commit -m "chore: atualizar dados (CI)" || echo "no changes to commit"
          git push
