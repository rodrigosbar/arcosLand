name: Atualizar dados ArcosLand (Pages)

on:
  workflow_dispatch:
  schedule:
    - cron: '*/5 * * * *'   # a cada 5 min
  push:
    branches: [ main, master ]
    paths-ignore:
      - 'public/**'         # evita re-disparo quando s√≥ a pasta gerada muda

concurrency:
  group: arcosland-pages
  cancel-in-progress: false

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    env:
      RTDB_URL: "https://arcosland-90ad2-default-rtdb.firebaseio.com/aquario.json"
      OUT_DIR: "public"
      BASE_URL: "https://arcosland.pages.dev"   # ajuste se usar outro dom√≠nio

    steps:
      - name: Checkout (shallow)
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Gerar arquivos (current.txt, txt, data.json, index.html, _headers, robots.txt, sitemap.xml)
        shell: bash
        run: |
          set -euo pipefail
          node <<'NODE'
          const https = require('https');
          const fs = require('fs');
          const path = require('path');

          const RTDB_URL = process.env.RTDB_URL;
          const OUT_DIR  = process.env.OUT_DIR || 'public';
          const BASE_URL = process.env.BASE_URL || '';

          // ---------- fetch com retry/backoff ----------
          function fetchJSONWithRetry(url, retries = 3, baseDelay = 600, timeoutMs = 8000) {
            return new Promise((resolve, reject) => {
              let attempt = 0;
              const tryOnce = () => {
                attempt++;
                const req = https.get(url, { headers: { Accept: 'application/json', 'Cache-Control': 'no-store' } }, (res) => {
                  if (res.statusCode && res.statusCode >= 400) { res.resume(); return fail(new Error(`HTTP ${res.statusCode}`)); }
                  let data = '';
                  res.on('data', d => data += d);
                  res.on('end', () => { try { resolve(JSON.parse(data)); } catch (e) { fail(new Error(`Parse JSON: ${e.message}`)); } });
                });
                req.setTimeout(timeoutMs, () => req.destroy(new Error('Timeout')));
                req.on('error', fail);
                function fail(err){
                  if (attempt >= retries) return reject(err);
                  setTimeout(tryOnce, baseDelay * Math.pow(2, attempt - 1));
                }
              };
              tryOnce();
            });
          }

          // ---------- -1 ¬∞C em todo "value" ----------
          function minusOneDeg(obj) {
            if (obj === null || typeof obj !== 'object') return obj;
            if (Array.isArray(obj)) return obj.map(minusOneDeg);
            const out = {};
            for (const k of Object.keys(obj)) {
              const v = obj[k];
              if (k === 'value' && typeof v === 'number' && Number.isFinite(v)) out[k] = Number((v - 1).toFixed(2));
              else if (v && typeof v === 'object') out[k] = minusOneDeg(v);
              else out[k] = v;
            }
            return out;
          }

          // ---------- chave=valor ----------
          function flattenKV(obj, prefix = '', lines = []) {
            if (obj === null || typeof obj !== 'object') {
              lines.push(`${prefix.replace(/\.$/,'')}=${String(obj)}`);
              return lines;
            }
            for (const k of Object.keys(obj).sort()) {
              const v = obj[k], p = prefix ? `${prefix}.${k}` : k;
              if (v !== null && typeof v === 'object') flattenKV(v, p, lines);
              else lines.push(`${p}=${String(v)}`);
            }
            return lines;
          }

          // ---------- sanitize p/ HTML ----------
          function esc(s){return s.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');}

          (async () => {
            // 1) Buscar dado bruto
            const raw = await fetchJSONWithRetry(RTDB_URL);
            if (!raw || !raw.current || typeof raw.current.value !== 'number' || !raw.current.ts) {
              throw new Error('JSON inesperado: faltando current.ts/value');
            }

            // 2) Ajustar e preparar pasta
            const adj = minusOneDeg(raw);
            if (!fs.existsSync(OUT_DIR)) fs.mkdirSync(OUT_DIR, { recursive: true });

            // 3) Arquivos auxiliares
            const currentStr = Number.isFinite(adj.current.value) ? adj.current.value.toFixed(2) : 'N/A';
            fs.writeFileSync(path.join(OUT_DIR, 'current.txt'), currentStr, 'utf-8');
            fs.writeFileSync(path.join(OUT_DIR, 'txt'), flattenKV(adj).join('\n') + '\n', 'utf-8');
            fs.writeFileSync(path.join(OUT_DIR, 'data.json'), JSON.stringify(adj, null, 2) + '\n', 'utf-8');

            // 4) HTML est√°tico + JSON-LD
            const tsBr = new Date(adj.current.ts).toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' });
            const jsonLd = {
              "@context": "https://schema.org",
              "@type": "Dataset",
              "name": "ArcosLand Temperatura",
              "description": "Temperatura do aqu√°rio ArcosLand publicada periodicamente.",
              "creator": { "@type": "Person", "name": "Rodrigo Soares" },
              "variableMeasured": {
                "@type": "PropertyValue",
                "name": "Temperatura da √°gua",
                "value": Number(currentStr),
                "unitCode": "CEL",
                "dateObserved": adj.current.ts,
                "measurementTechnique": "DS18B20 via NodeMCU ESP8266"
              },
              "distribution": [
                { "@type": "DataDownload", "encodingFormat": "application/json", "contentUrl": "./data.json" },
                { "@type": "DataDownload", "encodingFormat": "text/plain",  "contentUrl": "./current.txt" },
                { "@type": "DataDownload", "encodingFormat": "text/plain",  "contentUrl": "./txt" }
              ]
            };

            const html = `<!DOCTYPE html>
          <html lang="pt-BR">
          <head>
            <meta charset="utf-8">
            <meta name="description" content="Temperatura atual do aqu√°rio ArcosLand, extra√≠da do Firebase e publicada a cada 5 minutos.">
            <meta name="robots" content="index,follow">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>ArcosLand ‚Äî Temperatura Atual</title>
            <link rel="canonical" href="${BASE_URL || ''}/">
            <style>
              :root { color-scheme: light dark; }
              body { font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, monospace; background:#f8f9fa; color:#222; margin:0; padding:24px; }
              h1 { font-family: system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Cantarell, Noto Sans; font-weight:600; text-align:center; margin: 0 0 12px; }
              p.lead { text-align:center; margin: 0 0 20px; }
              .card { background:#fff; border:1px solid #ddd; border-radius:12px; padding:16px; box-shadow:0 2px 8px rgba(0,0,0,.06); max-width:980px; margin:0 auto 16px; }
              pre { margin:0; overflow:auto; }
              .muted { color:#666; font-size:.9em; text-align:center; margin-top:12px; }
            </style>
          </head>
          <body>
            <h1>üå°Ô∏è Temperatura do aqu√°rio ArcosLand</h1>
            <p class="lead">No dia <strong>${tsBr}</strong>, a temperatura do aqu√°rio √© <strong>${currentStr} ¬∞C</strong>.</p>

            <div class="card">
              <h2 style="margin-top:0">JSON completo (ajustado ‚àí1&nbsp;¬∞C)</h2>
              <pre>${esc(JSON.stringify(adj, null, 2))}</pre>
            </div>

            <p class="muted">Atualizado automaticamente via GitHub Actions (a cada 5 minutos).</p>

            <script type="application/ld+json">
          ${esc(JSON.stringify(jsonLd))}
            </script>
          </body>
          </html>`;
            fs.writeFileSync(path.join(OUT_DIR, 'index.html'), html, 'utf-8');

            // 5) _headers para no-cache no Cloudflare Pages
            const headers = `/*
  Cache-Control: no-store, no-cache, must-revalidate, max-age=0
  Pragma: no-cache
  Expires: 0
`;
            fs.writeFileSync(path.join(OUT_DIR, '_headers'), headers, 'utf-8');

            // 6) robots.txt liberando crawling
            fs.writeFileSync(path.join(OUT_DIR, 'robots.txt'), `User-agent: *
Allow: /
`, 'utf-8');

            // 7) sitemap.xml com tudo principal
            const nowIso = new Date().toISOString();
            const base = BASE_URL || '';
            const sitemap = `<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
  <url><loc>${base}/</loc><lastmod>${nowIso}</lastmod><changefreq>always</changefreq><priority>1.0</priority></url>
  <url><loc>${base}/data.json</loc><lastmod>${nowIso}</lastmod><changefreq>always</changefreq><priority>0.9</priority></url>
  <url><loc>${base}/current.txt</loc><lastmod>${nowIso}</lastmod><changefreq>always</changefreq><priority>0.9</priority></url>
  <url><loc>${base}/txt</loc><lastmod>${nowIso}</lastmod><changefreq>always</changefreq><priority>0.8</priority></url>
</urlset>`;
            fs.writeFileSync(path.join(OUT_DIR, 'sitemap.xml'), sitemap, 'utf-8');

            console.log('Arquivos atualizados em', OUT_DIR);
          })().catch((err) => {
            console.error(err);
            process.exit(1);
          });
          NODE

      - name: Detectar altera√ß√µes
        id: changes
        shell: bash
        run: |
          if git status --porcelain | grep -qE "${OUT_DIR}/(current\.txt|txt|data\.json|index\.html|_headers|robots\.txt|sitemap\.xml)"; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
          else
            echo "changed=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Commit & Push (se mudou)
        if: steps.changes.outputs.changed == 'true'
        shell: bash
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add ${OUT_DIR}/current.txt ${OUT_DIR}/txt ${OUT_DIR}/data.json ${OUT_DIR}/index.html ${OUT_DIR}/_headers ${OUT_DIR}/robots.txt ${OUT_DIR}/sitemap.xml
          git commit -m "chore: atualizar dados (CI)"
          git push
