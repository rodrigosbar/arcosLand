name: Atualizar dados ArcosLand (Pages)

on:
  workflow_dispatch:
  schedule:
    - cron: '*/5 * * * *'
  push:
    branches:
      - main
      - master

# Evita duas execu√ß√µes concorrentes deste mesmo workflow
concurrency:
  group: arcosland-pages
  cancel-in-progress: false

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      RTDB_URL: "https://arcosland-90ad2-default-rtdb.firebaseio.com/aquario.json"
      OUT_DIR: "public"
      # Opcional: se quiser rodar de 1 em 1 min por N minutos, defina > 0 (ex.: 5).
      LOOP_MINUTES: "0"   # "0" = desativado. Ex.: "5" => repete 5 vezes (a cada 60s).
      LOOP_SLEEP_SEC: "60"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Preparar script de gera√ß√£o
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$OUT_DIR"
          cat > .github/arcosland-generate.mjs <<'NODE'
          import fs from "fs";
          import crypto from "crypto";

          const RTDB_URL = process.env.RTDB_URL ?? "";
          const OUT_DIR  = process.env.OUT_DIR  ?? "public";

          const controller = new AbortController();
          const timeoutMs = 8000; // 8s
          const timeoutId = setTimeout(() => controller.abort(), timeoutMs);

          function sleep(ms){ return new Promise(r=>setTimeout(r,ms)); }

          async function fetchJSONWithRetry(url, {retries=3, baseDelay=500} = {}) {
            let attempt = 0;
            while (true) {
              try {
                const res = await fetch(url, {
                  method: "GET",
                  headers: {
                    "Accept": "application/json",
                    "Cache-Control": "no-store"
                  },
                  signal: controller.signal
                });
                if (!res.ok) throw new Error(`HTTP ${res.status}`);
                const text = await res.text();
                try {
                  return JSON.parse(text);
                } catch (e) {
                  throw new Error(`Falha ao parsear JSON: ${e.message} (payload len=${text.length})`);
                }
              } catch (err) {
                attempt++;
                if (attempt > retries) throw err;
                const delay = baseDelay * Math.pow(2, attempt - 1); // backoff
                await sleep(delay);
              }
            }
          }

          function assertAquarioShape(data) {
            if (!data || typeof data !== "object") throw new Error("JSON inv√°lido: objeto raiz ausente");
            if (!data.current || typeof data.current !== "object") throw new Error("JSON inv√°lido: campo 'current' ausente");
            if (typeof data.current.value !== "number" || !Number.isFinite(data.current.value)) {
              throw new Error("JSON inv√°lido: 'current.value' n√£o num√©rico");
            }
            if (typeof data.current.ts !== "string" || !data.current.ts) {
              throw new Error("JSON inv√°lido: 'current.ts' ausente");
            }
          }

          function minusOneDeg(obj) {
            if (obj === null || typeof obj !== "object") return obj;
            if (Array.isArray(obj)) return obj.map(minusOneDeg);
            const out = {};
            for (const [k, v] of Object.entries(obj)) {
              if (k === "value" && typeof v === "number" && Number.isFinite(v)) {
                out[k] = Number((v - 1).toFixed(2));
              } else if (v && typeof v === "object") {
                out[k] = minusOneDeg(v);
              } else {
                out[k] = v;
              }
            }
            return out;
          }

          function flattenKV(obj, prefix = "", lines = []) {
            if (obj === null || typeof obj !== "object") {
              const key = prefix.replace(/\.$/, "");
              lines.push(`${key}=${String(obj)}`);
              return lines;
            }
            const keys = Object.keys(obj).sort();
            for (const k of keys) {
              const v = obj[k];
              const p = prefix ? `${prefix}.${k}` : k;
              if (v !== null && typeof v === "object") {
                flattenKV(v, p, lines);
              } else {
                lines.push(`${p}=${String(v)}`);
              }
            }
            return lines;
          }

          function sha256(buf) {
            return crypto.createHash("sha256").update(buf).digest("hex");
          }

          function writeFileSyncSafe(filePath, content) {
            fs.mkdirSync(OUT_DIR, { recursive: true });
            fs.writeFileSync(filePath, content);
          }

          function toHuman(tsStr, value) {
            // Gera string "Dia DD de m√™s de AAAA, dia-da-semana, HH:MM, a temperatura do aqu√°rio √© XX,YY ¬∞C."
            // Sem depender de Intl com locale PT-BR do host: fazemos manualmente.
            const meses = ["janeiro","fevereiro","mar√ßo","abril","maio","junho","julho","agosto","setembro","outubro","novembro","dezembro"];
            const dias = ["domingo","segunda-feira","ter√ßa-feira","quarta-feira","quinta-feira","sexta-feira","s√°bado"];
            const d = new Date(tsStr);
            if (Number.isNaN(d.getTime())) return `Timestamp inv√°lido (${tsStr}). Valor: ${value?.toFixed?.(2)} ¬∞C`;
            const dd = String(d.getDate()).padStart(2,"0");
            const mmNome = meses[d.getMonth()];
            const yyyy = d.getFullYear();
            const hh = String(d.getHours()).padStart(2,"0");
            const mi = String(d.getMinutes()).padStart(2,"0");
            const dow = dias[d.getDay()];
            const vstr = typeof value === "number" ? value.toFixed(2).replace(".", ",") : String(value);
            return `Dia ${dd} de ${mmNome} de ${yyyy}, ${dow}, ${hh}:${mi}, a temperatura do aqu√°rio √© ${vstr} ¬∞C.`;
          }

          async function main(){
            const raw = await fetchJSONWithRetry(RTDB_URL, {retries: 3, baseDelay: 700});
            assertAquarioShape(raw);

            // Ajuste (-1¬∞C) conforme sua l√≥gica atual
            const adj = minusOneDeg(raw);

            // Sa√≠das
            const outDataPretty = JSON.stringify(adj, null, 2) + "\n";
            const outDataMin    = JSON.stringify(adj) + "\n";

            // current.*
            const currVal = adj?.current?.value;
            const currTs  = adj?.current?.ts;

            const currentTxt = (typeof currVal === "number" && Number.isFinite(currVal))
              ? currVal.toFixed(2) + "\n" : "N/A\n";

            const currentIsoTxt = (typeof currTs === "string" ? currTs : "N/A") + "\n";
            const currentHuman = toHuman(currTs, currVal) + "\n";

            // txt (chave=valor)
            const lines = flattenKV(adj);
            const kvTxt = lines.join("\n") + "\n";

            // index.html simples
            const html = `<!DOCTYPE html>
          <html lang="pt-BR">
          <head>
            <meta charset="utf-8">
            <title>ArcosLand ‚Äì Dados do Aqu√°rio</title>
            <meta name="viewport" content="width=device-width, initial-scale=1" />
            <style>
              :root { color-scheme: light dark; }
              body { font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, monospace; margin: 0; padding: 24px; background: #f6f6f7; }
              h1 { font-family: system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Cantarell, Noto Sans, "Helvetica Neue", Arial, "Apple Color Emoji", "Segoe UI Emoji"; text-align:center; margin:0 0 12px; }
              .wrap { max-width: 980px; margin: 0 auto; }
              .card { background: #fff; border-radius: 12px; box-shadow: 0 2px 10px rgba(0,0,0,.06); padding:16px; margin-bottom:16px; overflow:auto; }
              .muted { color: #666; font-size: 0.9rem; }
              pre { margin: 0; }
              a { color: #0b5; text-decoration: none; }
              a:hover { text-decoration: underline; }
            </style>
          </head>
          <body>
            <div class="wrap">
              <h1>üåø ArcosLand ‚Äì Dados do Aqu√°rio</h1>

              <div class="card">
                <strong>Atual:</strong>
                <div class="muted">${currentHuman.trim()}</div>
              </div>

              <div class="card"><strong>JSON (completo):</strong><pre>${outDataPretty}</pre></div>
              <div class="card"><strong>KV (txt):</strong><pre>${kvTxt}</pre></div>
              <div class="card muted">Atualizado automaticamente via GitHub Actions</div>
            </div>
          </body>
          </html>\n`;

            // Escrever arquivos
            fs.writeFileSync(`${OUT_DIR}/data.json`, outDataPretty, "utf-8");
            fs.writeFileSync(`${OUT_DIR}/data.min.json`, outDataMin, "utf-8");
            fs.writeFileSync(`${OUT_DIR}/current.txt`, currentTxt, "utf-8");
            fs.writeFileSync(`${OUT_DIR}/current.json`, JSON.stringify(adj?.current ?? {}, null, 2) + "\n", "utf-8");
            fs.writeFileSync(`${OUT_DIR}/current_iso.txt`, currentIsoTxt, "utf-8");
            fs.writeFileSync(`${OUT_DIR}/current_human.txt`, currentHuman, "utf-8");
            fs.writeFileSync(`${OUT_DIR}/txt`, kvTxt, "utf-8");
            fs.writeFileSync(`${OUT_DIR}/index.html`, html, "utf-8");

            // Hash do data.json para evitar commits redundantes
            const hash = sha256(Buffer.from(outDataPretty, "utf-8"));
            fs.writeFileSync(`${OUT_DIR}/data.sha256`, hash + "\n", "utf-8");

            console.log("OK: arquivos gerados em", OUT_DIR);
          }

          try {
            await main();
          } catch (e) {
            console.error("ERRO:", e?.message ?? e);
            process.exit(1);
          } finally {
            clearTimeout(timeoutId);
          }
          NODE

      - name: Executar gera√ß√£o (primeira vez)
        shell: bash
        run: |
          set -euo pipefail
          node .github/arcosland-generate.mjs

      - name: (Opcional) Loop interno em 1 min
        if: ${{ env.LOOP_MINUTES != '0' }}
        shell: bash
        run: |
          set -euo pipefail
          for i in $(seq 1 "${LOOP_MINUTES}"); do
            echo "Loop $i/${LOOP_MINUTES}..."
            # Regera arquivos
            if node .github/arcosland-generate.mjs; then
              echo "Gera√ß√£o OK (loop $i)."
            else
              echo "Falha no loop $i ‚Äî seguindo para pr√≥xima itera√ß√£o." >&2
            fi
            # Commit/push se houver mudan√ßas
            if git status --porcelain | grep -qE "public/(current\.txt|current\.json|current_iso\.txt|current_human\.txt|txt|data\.json|data\.min\.json|data\.sha256|index\.html)"; then
              git config user.name  "github-actions[bot]"
              git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
              git add public/current.txt public/current.json public/current_iso.txt public/current_human.txt public/txt public/data.json public/data.min.json public/data.sha256 public/index.html
              git commit -m "chore: atualizar dados (loop ${i}/${LOOP_MINUTES})" || true
              git push || true
            fi
            # Dorme at√© a pr√≥xima itera√ß√£o
            sleep "${LOOP_SLEEP_SEC}"
          done

      - name: Detectar altera√ß√µes (execu√ß√£o principal)
        if: ${{ env.LOOP_MINUTES == '0' }}
        id: changes
        shell: bash
        run: |
          set -euo pipefail
          if git status --porcelain | grep -qE "public/(current\.txt|current\.json|current_iso\.txt|current_human\.txt|txt|data\.json|data\.min\.json|data\.sha256|index\.html)"; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
          else
            echo "changed=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Commit & Push (se mudou)
        if: ${{ env.LOOP_MINUTES == '0' && steps.changes.outputs.changed == 'true' }}
        run: |
          set -euo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add public/current.txt public/current.json public/current_iso.txt public/current_human.txt public/txt public/data.json public/data.min.json public/data.sha256 public/index.html
          git commit -m "chore: atualizar dados (CI)" || echo "no changes to commit"
          git push || true
